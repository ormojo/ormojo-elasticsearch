'use strict';

exports.__esModule = true;

var _ormojo = require('ormojo');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deepDiff = require('deep-diff');

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 1.11.1
var ESMigration,
    MigrationPlan,
    _getMigrationCounter,
    extend = function (child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = {}.hasOwnProperty;

_getMigrationCounter = function (indexList) {
  var i, index, len, match, maxn, n;
  maxn = 0;
  for (i = 0, len = indexList.length; i < len; i++) {
    index = indexList[i];
    match = /ormojo(\d+)$/.exec(index);
    if (!match) {
      return null;
    }
    n = parseInt(match[1]);
    if (n > maxn) {
      maxn = n;
    }
  }
  return maxn;
};

MigrationPlan = function () {
  function MigrationPlan(backend1, index1) {
    this.backend = backend1;
    this.index = index1;
    this.targetSettings = {
      mappings: this.index.generateMappings(),
      settings: {
        analysis: this.index.generateAnalysis()
      }
    };
  }

  MigrationPlan.prototype.getTargetSettings = function () {
    return this.targetSettings;
  };

  MigrationPlan.prototype.prepare = function () {
    return this.getIndex().then(function (_this) {
      return function () {
        return _this.finalChecks();
      };
    }(this));
  };

  MigrationPlan.prototype.getIndex = function () {
    this.indexStatus = 'UNKNOWN';
    return this.backend.es.indices.get({
      index: this.index.name,
      ignore: [404]
    }).then(function (_this) {
      return function (result) {
        var details, k, matchingIndices, n, ref, ref1, v;
        _this.backend.corpus.log.trace('es.indices.get <', JSON.stringify(result, void 0, 2));
        if (result.error) {
          if (result.status === 404) {
            _this.indexStatus = 'DOESNT_EXIST';
          }
          return;
        }
        if (result[_this.index.name]) {
          _this.indexStatus = 'NOT_ALIASED';
          return;
        }
        matchingIndices = function () {
          var results;
          results = [];
          for (k in result) {
            v = result[k];
            results.push(k);
          }
          return results;
        }();
        n = _getMigrationCounter(matchingIndices);
        if (n === null) {
          _this.indexStatus = 'NOT_MIGRATED';
          return;
        } else {
          _this.indexStatus = 'AUTOMIGRATED';
          _this.migrationCounter = n;
          _this.mostRecentIndex = _this.index.name + "_ormojo" + n;
        }
        details = result[_this.mostRecentIndex];
        return _this.currentSettings = {
          mappings: details.mappings,
          settings: {
            analysis: ((ref = details.settings) != null ? (ref1 = ref.index) != null ? ref1.analysis : void 0 : void 0) || {}
          }
        };
      };
    }(this));
  };

  MigrationPlan.prototype.finalChecks = function () {
    var difference, i, len, ref;
    this.migrationDiff = _deepDiff2.default.diff(this.currentSettings, this.targetSettings);
    ref = this.migrationDiff;
    for (i = 0, len = ref.length; i < len; i++) {
      difference = ref[i];
      if (difference.kind === 'E' && JSON.stringify(difference.rhs) === difference.lhs) {
        _ormojo.Util.set(this.targetSettings, difference.path, difference.lhs);
      }
    }
    if (_lodash2.default.isEqual(this.currentSettings, this.targetSettings)) {
      this.migrationStrategy = 'NOT_NEEDED';
      return;
    } else {
      this.migrationDiff = _deepDiff2.default.diff(this.currentSettings, this.targetSettings);
      this.backend.corpus.log.trace('migration diff', this.migrationDiff);
    }
    this.migrationStrategy = 'CANT_MIGRATE';
    if (this.indexStatus === 'UNKNOWN' || this.indexStatus === 'NOT_ALIASED' || this.indexStatus === 'NOT_MIGRATED') {
      return this.reason = 'Index cannot be automigrated.';
    } else if (this.indexStatus === 'DOESNT_EXIST') {
      return this.migrationStrategy = 'CREATE';
    } else if (this.indexStatus === 'AUTOMIGRATED') {
      return this.migrationStrategy = 'REINDEX';
    }
  };

  MigrationPlan.prototype.executeCreateStrategy = function () {
    var aliases, body;
    if (this.migrationStrategy !== 'CREATE') {
      throw new Error('executeCreateStrategy() called in invalid state');
    }
    aliases = {};
    aliases[this.index.name] = {};
    body = Object.assign({}, this.targetSettings, {
      aliases: aliases
    });
    this.backend.corpus.log.trace('es.indices.create >', body);
    return this.backend.corpus.Promise.resolve(this.backend.es.indices.create({
      index: this.index.name + "_ormojo1",
      body: body
    })).then(function (_this) {
      return function (result) {
        _this.backend.corpus.log.trace('es.indices.create <', result);
        return result;
      };
    }(this));
  };

  MigrationPlan.prototype.executeReindexStrategy = function () {
    var alias, nextIndex, prevIndex;
    if (this.migrationStrategy !== 'REINDEX') {
      throw new Error('executeReindexStrategy() called in invalid state');
    }
    prevIndex = this.index.name + "_ormojo" + this.migrationCounter;
    nextIndex = this.index.name + "_ormojo" + (this.migrationCounter + 1);
    alias = "" + this.index.name;
    this.backend.corpus.log.trace('es.indices.create >', this.targetSettings);
    return this.backend.corpus.Promise.resolve(this.backend.es.indices.create({
      index: nextIndex,
      body: this.targetSettings
    })).then(function (_this) {
      return function (result) {
        _this.backend.corpus.log.trace('es.indices.create <', result);
        _this.backend.corpus.log.trace('es.indices.flush >');
        return _this.backend.es.indices.flush({
          index: prevIndex
        });
      };
    }(this)).then(function (_this) {
      return function (result) {
        _this.backend.corpus.log.trace('es.indices.flush <', result);
        _this.backend.corpus.log.trace('es.reindex >');
        return _this.backend.es.reindex({
          refresh: true,
          waitForCompletion: true,
          body: {
            source: {
              index: prevIndex
            },
            dest: {
              index: nextIndex
            }
          }
        });
      };
    }(this)).then(function (_this) {
      return function (result) {
        _this.backend.corpus.log.trace('es.reindex <', result);
        _this.backend.corpus.log.trace('es.updateAliases >');
        return _this.backend.es.indices.updateAliases({
          body: {
            actions: [{
              remove: {
                index: prevIndex,
                alias: alias
              }
            }, {
              add: {
                index: nextIndex,
                alias: alias
              }
            }]
          }
        });
      };
    }(this)).then(function (_this) {
      return function (result) {
        return _this.backend.corpus.log.trace('es.updateAliases <', result);
      };
    }(this));
  };

  MigrationPlan.prototype.execute = function () {
    if (this.migrationStrategy === 'REINDEX') {
      return this.executeReindexStrategy();
    } else if (this.migrationStrategy === 'CREATE') {
      return this.executeCreateStrategy();
    } else if (!this.migrationStrategy) {
      return this.backend.corpus.Promise.reject(new Error('unprepared MigrationPlan'));
    } else {
      return this.backend.corpus.Promise.resolve();
    }
  };

  return MigrationPlan;
}();

exports.default = ESMigration = function (superClass) {
  extend(ESMigration, superClass);

  function ESMigration(corpus, backend) {
    var index, name, ref;
    ESMigration.__super__.constructor.call(this, corpus, backend);
    this.plans = {};
    ref = this.backend.indices.getIndices();
    for (name in ref) {
      index = ref[name];
      this.plans[name] = new MigrationPlan(backend, index);
    }
  }

  ESMigration.prototype.prepare = function () {
    var name, plan, promises;
    promises = function () {
      var ref, results;
      ref = this.plans;
      results = [];
      for (name in ref) {
        plan = ref[name];
        results.push(plan.prepare());
      }
      return results;
    }.call(this);
    return this.corpus.Promise.all(promises);
  };

  ESMigration.prototype.getMigrationPlan = function () {
    var name, plan, plans;
    plans = function () {
      var ref, results;
      ref = this.plans;
      results = [];
      for (name in ref) {
        plan = ref[name];
        results.push({
          strategy: plan.migrationStrategy,
          index: plan.index.name,
          currentSettings: plan.currentSettings,
          targetSettings: plan.targetSettings
        });
      }
      return results;
    }.call(this);
    return plans;
  };

  ESMigration.prototype.execute = function () {
    var name, plan, promises;
    promises = function () {
      var ref, results;
      ref = this.plans;
      results = [];
      for (name in ref) {
        plan = ref[name];
        results.push(plan.execute());
      }
      return results;
    }.call(this);
    return this.corpus.Promise.all(promises);
  };

  return ESMigration;
}(_ormojo.Migration);