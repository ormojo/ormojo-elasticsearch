"use strict";

exports.__esModule = true;
exports.makeESAPI = undefined;

var _ormojo = require("ormojo");

var makeESAPI = exports.makeESAPI = function (es, log, Promise) {
  var create, createFromInstance, destroy, destroyInstance, findById, findByIds, findInstanceById, findRaw, update, updateInstance;
  findById = function (index, type, id, parent) {
    var rq;
    rq = {
      id: id,
      index: index,
      type: type,
      ignore: [404]
    };
    if (parent) {
      rq.parent = parent;
    }
    log.trace("es.get >", rq);
    return Promise.resolve(es.get(rq)).then(function (rst) {
      log.trace("es.get <", rst);
      return rst;
    });
  };
  findByIds = function (index, type, ids, opts) {
    var rq;
    rq = {
      index: index,
      type: type,
      body: {
        ids: ids
      }
    };
    if (opts) {
      Object.assign(rq, opts);
    }
    log.trace("es.mget >", rq);
    return Promise.resolve(es.mget(rq)).then(function (rst) {
      log.trace("es.mget <", rst);
      return rst;
    });
  };
  findRaw = function (index, type, opts) {
    var rq;
    rq = {
      index: index,
      type: type,
      version: true
    };
    if (!opts) {
      throw new Error('findRaw: must provide `opts`');
    }
    Object.assign(rq, opts);
    log.trace("es.search >", rq);
    return Promise.resolve(es.search(rq)).then(function (rst) {
      log.trace("es.search <", rst);
      return rst;
    });
  };
  create = function (index, type, data, id, parent) {
    var rq;
    rq = {
      index: index,
      type: type,
      body: data
    };
    if (id) {
      rq.id = id;
    }
    if (parent) {
      rq.parent = parent;
    }
    log.trace("es.create >", rq);
    return Promise.resolve(es.create(rq)).then(function (rst) {
      log.trace("es.create <", rst);
      return rst;
    });
  };
  update = function (index, type, id, delta, parent) {
    var rq;
    rq = {
      index: index,
      type: type,
      id: id,
      body: {
        doc: delta
      }
    };
    if (parent) {
      rq.parent = parent;
    }
    log.trace("es.update >", rq);
    return Promise.resolve(es.update(rq)).then(function (rst) {
      log.trace("es.update <", rst);
      return rst;
    });
  };
  destroy = function (index, type, id, parent) {
    var rq;
    rq = {
      index: index,
      type: type,
      id: id,
      ignore: [404]
    };
    if (parent) {
      rq.parent = parent;
    }
    log.trace("es.delete >", rq);
    return Promise.resolve(es["delete"](rq)).then(function (rst) {
      log.trace("es.delete <", rst);
      if (rst != null ? rst.found : void 0) {
        return true;
      } else {
        return false;
      }
    });
  };
  findInstanceById = function (boundModel, rehydrate, rehydrateContext, id, parent) {
    return findById(boundModel.getIndex(), boundModel.getDefaultType(), id, parent).then(function (rst) {
      if (!rst.found) {
        return void 0;
      } else {
        return rehydrate.call(rehydrateContext, boundModel, rst);
      }
    });
  };
  createFromInstance = function (instance, rehydrate, rehydrateContext) {
    return create(instance._index || instance.boundModel.getIndex(), instance._type || instance.boundModel.getDefaultType(), instance.dataValues, instance.id, instance._parent).then(function (rst) {
      instance._id = rst._id;
      rehydrate.call(rehydrateContext, instance.boundModel, rst, instance);
      delete instance.isNewRecord;
      return instance;
    });
  };
  updateInstance = function (instance, rehydrate, rehydrateContext) {
    var delta;
    delta = _ormojo.Util.getDelta(instance);
    if (!delta) {
      return Promise.resolve(instance);
    }
    return update(instance._index || instance.boundModel.getIndex(), instance._type || instance.boundModel.getDefaultType(), instance.id, delta, instance._parent).then(function (rst) {
      rehydrate.call(rehydrateContext, instance.boundModel, rst, instance);
      return instance;
    });
  };
  destroyInstance = function (instance) {
    return destroy(instance._index || instance.boundModel.getIndex(), instance._type || instance.boundModel.getDefaultType(), instance.id, instance._parent);
  };
  return {
    findById: findById,
    findByIds: findByIds,
    findRaw: findRaw,
    create: create,
    update: update,
    destroy: destroy,
    findInstanceById: findInstanceById,
    createFromInstance: createFromInstance,
    updateInstance: updateInstance,
    destroyInstance: destroyInstance
  };
}; // Generated by CoffeeScript 1.11.1