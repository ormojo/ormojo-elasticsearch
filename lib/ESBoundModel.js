'use strict';

exports.__esModule = true;

var _ormojo = require('ormojo');

var _ESField = require('./ESField');

var _ESField2 = _interopRequireDefault(_ESField);

var _esTypeMap = require('./esTypeMap');

var _esTypeMap2 = _interopRequireDefault(_esTypeMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 1.11.1
var ESBoundModel,
    extend = function (child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = {}.hasOwnProperty;

exports.default = ESBoundModel = function (superClass) {
  extend(ESBoundModel, superClass);

  function ESBoundModel(model, backend, bindingOptions) {
    ESBoundModel.__super__.constructor.apply(this, arguments);
    if (typeof this.name !== 'string') {
      throw new Error('ESBoundModel: Cannot bind unnamed model.');
    }
    if (typeof this.spec.type !== 'string') {
      throw new Error("ESBoundModel: bound model derived from Model named " + model.name + " must specify an elasticsearch type");
    }
    this.esIndex = (this.spec.index || this.name).toLowerCase();
    this.esType = this.spec.type.toLowerCase();
    this.instanceClass = (0, _ormojo.createStandardInstanceClassForBoundModel)(this);
  }

  ESBoundModel.prototype._deriveFields = function () {
    var f, fieldSpec, k, ref;
    this.fields = {};
    ref = this.spec.fields;
    for (k in ref) {
      fieldSpec = ref[k];
      f = new _ESField2.default().fromSpec(k, fieldSpec);
      this.fields[k] = f;
    }
    if (!this.fields['id']) {
      throw new Error("ESBoundModel: bound model derived from Model named `" + this.model.name + "` must have an id field.");
    }
    return void 0;
  };

  ESBoundModel.prototype.getIndex = function () {
    return this.esIndex;
  };

  ESBoundModel.prototype.getDefaultType = function () {
    return this.esType;
  };

  ESBoundModel.prototype.bindChildModel = function (model, bindingOptions) {
    bindingOptions = bindingOptions || {};
    bindingOptions.index = this.getIndex();
    bindingOptions.parentBoundModel = this;
    return this.backend.bindChildModel(model, bindingOptions);
  };

  ESBoundModel.prototype._findById = function (id) {
    return this.backend.api.findInstanceById(this, this.backend._deserialize, this.backend, id);
  };

  ESBoundModel.prototype._findByIds = function (ids) {
    return this.backend.api.findByIds(this.getIndex(), this.getDefaultType(), ids).then(function (_this) {
      return function (rst) {
        var entity, i, len, ref, results;
        ref = (rst != null ? rst.docs : void 0) || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          entity = ref[i];
          if (!(entity != null ? entity.found : void 0)) {
            results.push(void 0);
          } else {
            results.push(_this.backend._deserialize(_this, entity));
          }
        }
        return results;
      };
    }(this));
  };

  ESBoundModel.prototype.findById = function (id) {
    if (Array.isArray(id)) {
      return this._findByIds(id);
    } else {
      return this._findById(id);
    }
  };

  ESBoundModel.prototype.generateMapping = function () {
    var field, k, m, mapping, mk, mv, props, ref, ref1, ref2;
    m = {};
    m.properties = props = {};
    ref = this.getFields();
    for (k in ref) {
      field = ref[k];
      if (!(k !== 'id')) {
        continue;
      }
      mapping = ((ref1 = field.spec.elasticsearch) != null ? ref1.mapping : void 0) || {};
      ref2 = (0, _esTypeMap2.default)(field.spec.type);
      for (mk in ref2) {
        mv = ref2[mk];
        if (!(mk in mapping)) {
          mapping[mk] = mv;
        }
      }
      props[field.getBackendFieldName()] = mapping;
    }
    return m;
  };

  ESBoundModel.prototype.generateAnalysisProps = function () {
    var props;
    props = {};
    if (this.spec.analyzer) {
      props.analyzer = this.spec.analyzer;
    }
    if (this.spec.filter) {
      props.filter = this.spec.filter;
    }
    return props;
  };

  return ESBoundModel;
}(_ormojo.BoundModel);