// Generated by CoffeeScript 1.11.1
export var ESIndex = function () {
  function ESIndex(backend, name) {
    this.backend = backend;
    this.name = name;
    this.boundModels = [];
    this.types = {};
  }

  ESIndex.prototype.addBoundModel = function (bm) {
    this.types[bm.getDefaultType()] = bm;
    return this.boundModels.push(bm);
  };

  ESIndex.prototype._deleteIndex = function () {
    return this.backend.es.indices["delete"]({
      index: this.name
    });
  };

  ESIndex.prototype.generateMappings = function () {
    var boundModel, mappings, ref, type;
    mappings = {};
    ref = this.types;
    for (type in ref) {
      boundModel = ref[type];
      mappings[type] = boundModel.generateMapping();
    }
    return mappings;
  };

  ESIndex.prototype.generateAnalysis = function () {
    var analysis, boundModel, props, ref, type;
    analysis = {};
    ref = this.types;
    for (type in ref) {
      boundModel = ref[type];
      props = boundModel.generateAnalysisProps();
      if (props.analyzer) {
        analysis.analyzer = Object.assign(analysis.analyzer || {}, props.analyzer);
      }
      if (props.filter) {
        analysis.filter = Object.assign(analysis.filter || {}, props.filter);
      }
    }
    return analysis;
  };

  return ESIndex;
}();

export var ESIndices = function () {
  function ESIndices(backend) {
    this.backend = backend;
    this.indices = {};
  }

  ESIndices.prototype.addBoundModel = function (bm) {
    var indexName;
    indexName = bm.getIndex();
    if (!this.indices[indexName]) {
      this.indices[indexName] = new ESIndex(this.backend, indexName);
    }
    return this.indices[indexName].addBoundModel(bm);
  };

  ESIndices.prototype.getIndices = function () {
    return this.indices;
  };

  return ESIndices;
}();